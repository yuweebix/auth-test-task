// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/yuweebix/auth-test-task/internal/models"
)

// MockDomain is an autogenerated mock type for the domain type
type MockDomain struct {
	mock.Mock
}

type MockDomain_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomain) EXPECT() *MockDomain_Expecter {
	return &MockDomain_Expecter{mock: &_m.Mock}
}

// AccessToken provides a mock function with given fields: _a0, _a1
func (_m *MockDomain) AccessToken(_a0 context.Context, _a1 *models.TokenAccessRequest) (*models.TokenAccessResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AccessToken")
	}

	var r0 *models.TokenAccessResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TokenAccessRequest) (*models.TokenAccessResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TokenAccessRequest) *models.TokenAccessResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokenAccessResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TokenAccessRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDomain_AccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessToken'
type MockDomain_AccessToken_Call struct {
	*mock.Call
}

// AccessToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.TokenAccessRequest
func (_e *MockDomain_Expecter) AccessToken(_a0 interface{}, _a1 interface{}) *MockDomain_AccessToken_Call {
	return &MockDomain_AccessToken_Call{Call: _e.mock.On("AccessToken", _a0, _a1)}
}

func (_c *MockDomain_AccessToken_Call) Run(run func(_a0 context.Context, _a1 *models.TokenAccessRequest)) *MockDomain_AccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.TokenAccessRequest))
	})
	return _c
}

func (_c *MockDomain_AccessToken_Call) Return(_a0 *models.TokenAccessResponse, _a1 error) *MockDomain_AccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDomain_AccessToken_Call) RunAndReturn(run func(context.Context, *models.TokenAccessRequest) (*models.TokenAccessResponse, error)) *MockDomain_AccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: _a0, _a1
func (_m *MockDomain) RefreshToken(_a0 context.Context, _a1 *models.TokenRefreshRequest) (*models.TokenRefreshResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *models.TokenRefreshResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TokenRefreshRequest) (*models.TokenRefreshResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TokenRefreshRequest) *models.TokenRefreshResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokenRefreshResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TokenRefreshRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDomain_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockDomain_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.TokenRefreshRequest
func (_e *MockDomain_Expecter) RefreshToken(_a0 interface{}, _a1 interface{}) *MockDomain_RefreshToken_Call {
	return &MockDomain_RefreshToken_Call{Call: _e.mock.On("RefreshToken", _a0, _a1)}
}

func (_c *MockDomain_RefreshToken_Call) Run(run func(_a0 context.Context, _a1 *models.TokenRefreshRequest)) *MockDomain_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.TokenRefreshRequest))
	})
	return _c
}

func (_c *MockDomain_RefreshToken_Call) Return(_a0 *models.TokenRefreshResponse, _a1 error) *MockDomain_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDomain_RefreshToken_Call) RunAndReturn(run func(context.Context, *models.TokenRefreshRequest) (*models.TokenRefreshResponse, error)) *MockDomain_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomain creates a new instance of MockDomain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomain(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomain {
	mock := &MockDomain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
